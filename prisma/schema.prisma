// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String?
  chosenLanguage String
  password       String?
  token          String?
  isAdmin        Boolean        @default(false)
  eventLinks     EventUser[]
  availabilities Availability[]
}

model Event {
  id                 Int         @id @default(autoincrement())
  name               String
  title              String?
  slug               String?
  logo               String?
  icon               String?
  theme              String?
  homepage           String?
  backlinkText       String?
  godfatherInfoLink  String?
  isListingOpen      Boolean     @default(false)
  showIsMotorized    Boolean     @default(false)
  showIsReserve      Boolean     @default(false)
  showFideid         Boolean     @default(false)
  registerShowDates  Boolean     @default(false)
  isFree             Boolean     @default(true)
  sendMailOnRegister Boolean     @default(true)
  hasGodfather       Boolean     @default(false)
  isOpen             Boolean     @default(false)
  hasEnded           Boolean     @default(false)
  userLinks          EventUser[]
  dates              Date[]
}

model Date {
  id             Int            @id @default(autoincrement())
  date           DateTime
  title          String?
  comment        String?
  isLocked       Boolean        @default(false)
  position       Int
  event          Event          @relation(fields: [eventId], references: [id])
  eventId        Int
  availabilities Availability[]
  groups         Group[]
}

model Availability {
  id          Int     @id @default(autoincrement())
  isAvailable Boolean @default(false)
  date        Date    @relation(fields: [dateId], references: [id])
  dateId      Int
  user        User    @relation(fields: [userId], references: [id])
  userId      Int

  @@unique([dateId, userId])
}

model EventUser {
  id             Int         @id @default(autoincrement())
  position       Int
  alias          String
  password       String
  fideid         String?
  phone          String?
  godfather      String?
  note           String?
  elo            String?
  club           String?
  nationality    String?
  hasPaid        Boolean     @default(false)
  paymentNote    String?
  isMotorized    Boolean?
  isReserve      Boolean?
  isValidated    Boolean     @default(false)
  isPasswordSent Boolean     @default(false)
  isHidden       Boolean     @default(false)
  isAdmin        Boolean     @default(false)
  isOwner        Boolean     @default(false)
  token          String?
  event          Event       @relation(fields: [eventId], references: [id])
  eventId        Int
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
  groupUsers     GroupUser[]

  @@unique([eventId, userId])
}

model Group {
  id          Int         @id @default(autoincrement())
  name        String?
  color       String?
  isAtHome    Boolean     @default(true)
  isValidated Boolean     @default(false)
  address     String?
  versus      String?
  position    Int
  date        Date        @relation(fields: [dateId], references: [id], onDelete: Cascade)
  dateId      Int
  groupUsers  GroupUser[]
}

model GroupUser {
  id          Int       @id @default(autoincrement())
  position    Int
  isConfirmed Boolean   @default(false)
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     Int
  userLink    EventUser @relation(fields: [userLinkId], references: [id])
  userLinkId  Int

  @@unique([groupId, userLinkId])
}
